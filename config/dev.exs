use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with brunch.io to recompile .js and .css sources.
config :poc_uberauth, PocUberauthWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [node: ["node_modules/brunch/bin/brunch", "watch", "--stdin",
                    cd: Path.expand("../assets", __DIR__)]]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# command from your terminal:
#
#     openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -keyout priv/server.key -out priv/server.pem
#
# The `http:` config above can be replaced with:
#
#     https: [port: 4000, keyfile: "priv/server.key", certfile: "priv/server.pem"],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :poc_uberauth, PocUberauthWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r{priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$},
      ~r{priv/gettext/.*(po)$},
      ~r{lib/poc_uberauth_web/views/.*(ex)$},
      ~r{lib/poc_uberauth_web/templates/.*(eex)$}
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Configure your database
config :poc_uberauth, PocUberauth.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: "postgres",
  password: "",
  database: "poc_uberauth_dev",
  hostname: "localhost",
  pool_size: 10

# plsm config 
#    * module_name -> This is the name of the module that the models will be placed under
#    * destination -> The output location for the generated models  
#    * server -> this is the name of the server that you are connecting to. It can be a DNS name or an IP Address. This needs to be filled in as there are no defaults
#    * port -> The port that the database server is listening on. This needs to be provided as there may not be a default for your server
#    * database_name -> the name of the database that you are connecting to. This is required.
#    * username -> The username that is used to connect. 
#    Make sure that there is sufficient privelages to be able to connect, query tables as well as query information schemas on the database. 
#    The schema information is used to find the index/keys on each table
#    * password -> This is necessary as there is no default nor is there any handling of a blank password currently.
#    * type -> This dictates which database vendor you are using. We currently support PostgreSQL and MySQL. 
#    If no value is entered then it will default to MySQL. Do note that this is an atom and not a string

config :plsm,
  module_name: "Foo",
  destination: "foo",
  server: "localhost",
  port: "5432",
  database_name: "poc_uberauth_dev",
  username: "postgres",
  password: "",
  type: :postgres 

